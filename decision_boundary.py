# -*- coding: utf-8 -*-
"""Decision_boundary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JiGVL_YZYCD5hm9iBF4Kn7fI0FyicqM
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
import seaborn as sns
import plotly.express as px
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,matthews_corrcoef,classification_report,roc_curve

df=pd.read_csv('/content/heart.csv')

df

df.shape

df.info()

df.isna().sum()

""" There are no missing values found in the dataset, I didnâ€™t use any missing values handling techniques"""

All = df.shape[0]
disease = df[df['output'] == 1]
nondisease = df[df['output'] == 0]

x = len(disease)/All
y = len(nondisease)/All

print('disease :',x*100,'%')
print('non disease :',y*100,'%')

labels=['non disease','disease']
df1=pd.value_counts(df['output'],sort=True)
df1.plot(kind='bar',rot=0)
plt.title('Heart Disease')

df.hist(figsize=(20,15),bins=15)
plt.show()

correlation_matrix = df.corr()
fig = plt.figure(figsize=(12,9))
sns.heatmap(correlation_matrix,vmax=0.8,square = True)
plt.show()

x=df.drop('output',axis=1)
x

y=df['output']
y

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

sc.fit_transform(x)

from sklearn.decomposition import PCA
pc=PCA()

pc.fit_transform(x)

pc.get_covariance()

pca=PCA(n_components=2)

df1=pca.fit_transform(x)

fig=px.scatter(df1)
fig.show()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)

from sklearn.neighbors import KNeighborsClassifier

classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=5 )  
classifier.fit(X_train, y_train)

y_pred=classifier.predict(X_test)

y_pred

fig=px.scatter(y_pred)
fig.show()

from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred))

from sklearn.metrics import accuracy_score

print('Accuracy_Score: ',accuracy_score(y_test,y_pred))